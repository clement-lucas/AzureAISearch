@using System.Text.RegularExpressions
@using System.Text
@using DocumentSearchPortal.Helpers
@using System.Text.Json


@model DocumentSearchPortal.Models.SearchResultViewModel

@{
    ViewData["Title"] = "ドキュメント検索";
    ViewData["CountPrefixSuffix"] = Model.CountPrefixSuffix;
}

<h2>@ViewData["Title"]</h2>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize the multi-select dropdown
            // Example using jQuery for a basic multi-select, consider using a plugin for enhanced UX
            $('#selectedIndexes').select2();
        });
    </script>
}

<!-- Search Controls -->

<div class="row">
    <form asp-controller="Search" asp-action="Search" method="post">
        <!-- Search Keywords -->
        <div class="form-group row">
            <label for="searchQuery" class="col-sm-2 col-form-label">検索キーワード</label>
            <div class="col-sm-10">
            <input type="text" id="searchQuery" name="SearchQuery" class="form-control" value="@Model.SearchQuery" placeholder="検索キーワードを入力">
            </div>
        </div>

        <!-- Filter Expression and Order By Expression -->
        <div class="form-group row">
            <label for="filterExpression" class="col-sm-2 col-form-label">フィルター式</label>
            <div class="col-sm-4">
                <input type="text" id="filterExpression" name="FilterExpression" class="form-control" value="@Model.FilterExpression" placeholder="例：Category eq 'Category1'and metadata_storage_last_modified ge 2024-02-28">
            </div>
            <label for="orderbyExpression" class="col-sm-2 col-form-label">OrderBy式</label>
            <div class="col-sm-4">
            <input type="text" id="orderbyExpression" name="OrderByExpression" class="form-control" value="@Model.OrderByExpression" placeholder="例：metadata_storage_last_modified desc">
            </div>
        </div>

        <!-- Search Results Count and Highlight Results Count -->
        <div class="form-group row">
            <label for="countSearchResult" class="col-sm-2 col-form-label">検索結果数</label>
            <div class="col-sm-4">
            <input type="number" id="countSearchResult" name="CountSearchResult" class="form-control" value="@Model.CountSearchResult" placeholder="例：5">
            </div>
            <label for="countHighlightResult" class="col-sm-2 col-form-label">ハイライト結果数</label>
            <div class="col-sm-4">
            <input type="number" id="countHighlightResult" name="CountHighlightResult" class="form-control" value="@Model.CountHighlightResult" placeholder="例：2">
            </div>
        </div>

        <!-- Vector Search Count and Max characters Count -->
        <div class="form-group row">
            <label for="countVectorResult" class="col-sm-2 col-form-label">ベクトル結果の数</label>
            <div class="col-sm-4">
            <input type="number" id="countVectorResult" name="countVectorResult" class="form-control" value="@Model.CountVectorResult" placeholder="例：2">
            </div>
            <label for="countPrefixSuffix" class="col-sm-2 col-form-label">前後の文字数</label>
            <div class="col-sm-4">
            <input type="number" id="countPrefixSuffix" name="CountPrefixSuffix" class="form-control" value="@Model.CountPrefixSuffix" placeholder="例：10">
            </div>
        </div>

        <!-- Search Mode -->
        <div class="form-group row">
            <label for="searchMode" class="col-sm-2 col-form-label">検索モード</label>
            <div class="col-sm-4">
                <input type="text" id="searchMode" name="SearchMode" class="form-control" value="@Model.SearchMode" placeholder="例：Any or All">
            </div>
            <label for="selectedIndexes" class="col-sm-2 col-form-label">1 つまたは複数のインデックスを選択してください</label>
            <div class="col-sm-4">
                <select asp-for="SelectedIndexes" asp-items="@(new SelectList(Model.AvailableIndexes))" class="form-control" id="selectedIndexes" multiple="multiple" size="@Model.AvailableIndexes.Count()">
                </select>
            </div>
        </div>


        <!-- Submit Button -->
        <div class="form-group row">
            <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">検索</button>
            </div>
        </div>
    </form>
</div>
<hr /> <!-- Add a horizontal rule to separate results -->

<div class="row">    
    <!-- Display Normal Search Results -->
    <div class="row">
        <h3>キーワード検索結果</h3>
        @if (Model?.NormalSearchResults?.TotalCount > 0)
        {            
            @foreach (var result in Model.NormalSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>キーワード検索の結果は見つかりません。</p>
        }
    </div>

        <!-- Display Plural Search Results -->
    <div class="row">
        <h3>複数形インデックス検索結果</h3>
        @if (Model?.PluralSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.PluralSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>複数形インデックス検索の結果は見つかりません。</p>
        }
    </div>

    <!-- Display Vector Search Results -->
    <div class="row">
        <h3>ベクトル検索結果</h3>
        @if (Model?.VectorSearchResults?.TotalCount > 0)
        {            
            @foreach (var result in Model.VectorSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

                    <div class="row">
                        <div class="col-md-3">
                            <strong>ベクトルチャンク</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("chunk") ? result.Document["chunk"] : string.Empty)
                        </div>
                    </div>
                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>ベクトル検索の結果は見つかりません。</p>
        }
    </div>

    <!-- Display Hybrid Search Results -->
    <div class="row">
        <h3>セマンティック再ランキングを含むハイブリッド(Ada Model)検索結果</h3>
        @if (Model?.HybridAdaSearchResults?.TotalCount > 0)
        {            
            @foreach (var result in Model.HybridAdaSearchResults.GetResults())
            {
                <div class="container mt-4">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Semantic Reranker Score</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.SemanticSearch.RerankerScore != null ? result.SemanticSearch.RerankerScore : string.Empty)
                        </div>
                    </div>

                    @Html.Partial("_SearchResultPartial", result)

                    <!-- Highlighted search contents -->
                    @if (result?.SemanticSearch?.Captions?.Any() == true)
                    {
                        foreach (var caption in result.SemanticSearch.Captions)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>キャプション</strong>
                                </div>
                                <div class="col-md-9">
                                    @if (caption?.Highlights != null && caption?.Highlights != "")
                                    {
                                        @Html.Raw(caption?.Highlights?.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                    }
                                    else
                                    {
                                    @(caption?.Text)
                                    }
                                    
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <p>セマンティックキャプションはありません。</p>
                            </div>
                        </div>
                    }

                    <!-- Highlighted search contents -->
                    @if (result?.Highlights?.Count > 0 && result.Highlights.ContainsKey("chunk"))
                    {
                        foreach (var highlight in result.Highlights["chunk"])
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>チャンクのハイライト</strong>
                                </div>
                                <div class="col-md-9">
                                @Html.Raw(highlight.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                        <div class="col-md-12">
                                <p>チャンクに利用可能なハイライトはありません。</p>
                        </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Chunk</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("chunk") ? result.Document["chunk"] : string.Empty)
                        </div>
                    </div>
                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>ハイブリッド検索結果は見つかりません。</p>
        }
    </div>

    <!-- Display Hybrid Custom Vector Search Results -->
    <div class="row">
        <h3>セマンティック再ランキングを含むハイブリッド(Sentence Transform Model)検索結果</h3>
        @if (Model?.HybridCustomVectorSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.HybridCustomVectorSearchResults.GetResults())
            {
                <div class="container mt-4">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Semantic Reranker Score</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.SemanticSearch.RerankerScore != null ? result.SemanticSearch.RerankerScore : string.Empty)
                        </div>
                    </div>

                    @Html.Partial("_SearchResultPartial", result)

                    <!-- Highlighted search contents -->
                    @if (result?.SemanticSearch?.Captions?.Any() == true)
                    {
                        foreach (var caption in result.SemanticSearch.Captions)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>キャプション</strong>
                                </div>
                                <div class="col-md-9">
                                    @if (caption?.Highlights != null && caption?.Highlights != "")
                                    {
                                        @Html.Raw(caption?.Highlights?.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                    }
                                    else
                                    {
                                        @(caption?.Text)
                                    }

                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <p>セマンティックキャプションはありません。</p>
                            </div>
                        </div>
                    }

                    <!-- Highlighted search contents -->
                    @if (result?.Highlights?.Count > 0 && result.Highlights.ContainsKey("chunk"))
                    {
                        foreach (var highlight in result.Highlights["chunk"])
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>チャンクのハイライト</strong>
                                </div>
                                <div class="col-md-9">
                                    @Html.Raw(highlight.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <p>チャンクに利用可能なハイライトはありません。</p>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Chunk</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("chunk") ? result.Document["chunk"] : string.Empty)
                        </div>
                    </div>
                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>Hybrid_Custom_SentenceTransformer 検索結果は見つかりません。</p>
        }
    </div>
    
    <!-- Display SQL + Normal Search Results -->
    <div class="row">
        <h3>SQL+キーワード検索結果</h3>
        @if (Model?.CombinedSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.CombinedSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>SQL+キーワード検索の結果は見つかりません。</p>
        }
    </div>
    
    <!-- Display Document Security Index Search Results -->
    <div class="row">
        <h3>Document Security Index検索結果</h3>
        @if (Model?.SecuritySearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.SecuritySearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

                    <div class="row">
                        <div class="col-md-3">
                            <strong>User Group</strong>
                        </div>
                        <div class="col-md-9">
                            @if (result.Document.ContainsKey("UserGroup") && result.Document["UserGroup"] is IEnumerable<object> userGroups)
                            {
                                foreach (var userGroup in userGroups)
                                {
                                    <div>@userGroup.ToString()</div>
                                }
                            }
                            else
                            {
                                <div>None</div>
                            }
                        </div>
                    </div>

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>Document Security Index検索の結果は見つかりません。</p>
        }
    </div>

    <!-- Display AI Enrichment(画像) Search Results -->
    <div class="row">
        <h3>AI Enrichment(画像)検索結果</h3>
        @if (Model?.AIEnrichImageSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.AIEnrichImageSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

                    <!-- Highlighted search contents -->
                    @if (result?.Highlights?.Count > 0 && result.Highlights.ContainsKey("merged_content"))
                    {
                        var countPrefixSuffix = Model.CountPrefixSuffix.HasValue ? Convert.ToInt32(Model.CountPrefixSuffix) : 0;

                        foreach (var originalSentence in result.Highlights["merged_content"])
                        {
                            if (countPrefixSuffix > 0)
                            {
                                string adjustedSentence = HighlightTextHelper.ProcessText(originalSentence, countPrefixSuffix);

                                <div class="row">
                                    <div class="col-md-3">
                                        <strong>コンテンツ+画像からのハイライト (トリミングあり)</strong>
                                    </div>
                                    <div class="col-md-9">
                                        @Html.Raw(adjustedSentence)
                                    </div>
                                </div>

                            }

                            // Display the full highlight without trimming
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>コンテンツ+画像からのハイライト</strong>
                                </div>
                                <div class="col-md-9">
                                    @Html.Raw(originalSentence.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <p>コンテンツに利用可能なハイライトはありません。</p>
                            </div>
                        </div>
                    }

                    @if (result.Document.ContainsKey("text") && result.Document["text"] is object[] texts)
                    {
                        <div class="row">
                            <div class="col-md-3">
                                <strong>OCR text</strong>
                            </div>
                            <div class="col-md-9">
                                @for (int i = 0; i < texts.Length; i++)
                                {
                                    var originaltext = texts[i] as string; // Safely cast to string.
                                    if (originaltext != null)
                                    {
                                        <text>[</text>

                                        @Html.Raw(originaltext)

                                        <text>]</text>
                                        if (i < texts.Length - 1)
                                        {
                                            @:,
                                        }
                                    }
                                }
                            </div>
                        </div>
                    }

                    @if (result.Document.ContainsKey("imageTags") && result.Document["imageTags"] is object[] tags)
                    {
                        <div class="row">
                            <div class="col-md-3">
                                <strong>画像分析 imageTags</strong>
                            </div>
                            <div class="col-md-9">
                                @for (int i = 0; i < tags.Length; i++)
                                {
                                    var tag = tags[i] as string; // Safely cast to string.
                                    if (tag != null)
                                    {
                                        <text>[</text>

                                        @Html.Raw(tag)

                                        <text>]</text>
                                        if (i < tags.Length - 1)
                                        {
                                            @:,
                                        }
                                    }
                                }
                            </div>
                        </div>
                    }

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>AI Enrichment検索の結果は見つかりません。</p>
        }
    </div>

    <!-- Display AI Enrichment(Custom Entity Lookup) Search Results -->
    <div class="row">
        <h3>AI Enrichment(Custom Entity Lookup)検索結果</h3>
        @if (Model?.AIEnrichCustomEntityLookupSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.AIEnrichCustomEntityLookupSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

                    @if (result.Document.ContainsKey("matchedEntities"))
                    {
                        // Assuming matchedEntities is an IEnumerable of IDictionary<string, object>
                        var matchedEntitiesRaw = result.Document["matchedEntities"];
                        if (matchedEntitiesRaw is IEnumerable<object> matchedEntities && matchedEntities.Count() > 0)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>Matched Entities</strong>
                                </div>
                                <div class="col-md-9">
                                    @foreach (var entityRaw in matchedEntities)
                                    {
                                        if (entityRaw is IDictionary<string, object> entity)
                                        {
                                            object nameObj;
                                            object descriptionObj;

                                            string name = string.Empty;
                                            string description = string.Empty;

                                            if (entity.TryGetValue("name", out nameObj))
                                            {
                                                name = nameObj as string;
                                            }

                                            if (entity.TryGetValue("description", out descriptionObj))
                                            {
                                                description = descriptionObj as string;
                                            }

                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(description))
                                            {
                                                <div>
                                                    <strong>Name:</strong> @Html.Raw(name)
                                                </div>
                                                <div>
                                                    <strong>Description:</strong> @Html.Raw(description)
                                                </div>
                                                <br />
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>AI Enrichment(Custom Entity Lookup)検索結果は見つかりません。</p>
        }
    </div>

    <!-- Display AI Enrichment(Entity Linking) Search Results -->
    <div class="row">
        <h3>AI Enrichment(Entity Linking)検索結果</h3>
        @if (Model?.AIEnrichEntityLinkingSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.AIEnrichEntityLinkingSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result) 

                    @if (result.Document.ContainsKey("linkedEntities"))
                    {
                        // Assuming linkedEntities is an IEnumerable of IDictionary<string, object>
                        var linkedEntitiesRaw = result.Document["linkedEntities"];
                        if (linkedEntitiesRaw is IEnumerable<object> linkedEntities && linkedEntities.Count() > 0)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>Linked Entities</strong>
                                </div>
                                <div class="col-md-9">
                                    @foreach (var entityRaw in linkedEntities)
                                    {
                                        if (entityRaw is IDictionary<string, object> entity)
                                        {
                                            object nameObj;
                                            object urlObj;

                                            string name = string.Empty;
                                            string url = string.Empty;

                                            if (entity.TryGetValue("name", out nameObj))
                                            {
                                                name = nameObj as string;
                                            }

                                            if (entity.TryGetValue("url", out urlObj))
                                            {
                                                url = urlObj as string;
                                            }

                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(url))
                                            {
                                                <div>
                                                    <strong>Name:</strong> @Html.Raw(name)
                                                </div>
                                                <div>
                                                    <strong>URL:</strong> <a href="@Html.Raw(url)" target="_blank">@Html.Raw(url)</a>
                                                </div>
                                                <br />
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }


                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>AI Enrichment(Entity Linking)検索結果は見つかりません。</p>
        }
    </div>

    <!-- Display AI Enrichment(Entity Recognition) Search Results -->
    <div class="row">
        <h3>AI Enrichment(Entity Recognition)検索結果</h3>
        @if (Model?.AIEnrichEntityRecognitionSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.AIEnrichEntityRecognitionSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

                    @{
                        string[] keysToProcess = new string[] 
                        { 
                            "persons", 
                            "locations", 
                            "organizations", 
                            "quantities", 
                            "dateTimes", 
                            "urls",
                            "emails",
                            "personTypes",
                            "events",
                            "products",
                            "skills",
                            "addresses",
                            "phoneNumbers",
                            "ipAddresses"
                        };
                    }

                    @foreach (var key in keysToProcess)
                    {
                        if (result.Document.ContainsKey(key) && result.Document[key] is object[] objList)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>@key</strong> <!-- Dynamically display the key -->
                                </div>
                                <div class="col-md-9">
                                    @for (int i = 0; i < objList.Length; i++)
                                    {
                                        var objText = objList[i] as string; // Safely cast to string.
                                        if (objText != null)
                                        {
                                            <text>[</text>

                                            @Html.Raw(objText)

                                            <text>]</text>
                                            if (i < objList.Length - 1)
                                            {
                                                @:,
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }


                    @if (result.Document.ContainsKey("namedEntities") && result.Document["namedEntities"] is object[] recognizedEntities)
                    {
                        <div class="row">
                            <div class="col-md-3">
                                <strong>Recognized Entities</strong>
                            </div>
                            <div class="col-md-9">
                                <ul>
                                    @foreach (var entityObject in recognizedEntities)
                                    {
                                        // Cast each entity to a SearchDocument
                                        if (entityObject is Azure.Search.Documents.Models.SearchDocument entity)
                                        {
                                            <li>
                                                Category: @entity.GetString("category"),
                                                SubCategory: @(entity.GetString("subcategory") ?? "N/A"),
                                                Confidence Score: @entity.GetDouble("confidenceScore"),
                                                Length Score: @entity.GetInt32("length"),
                                                Offset: @entity.GetInt32("offset"),
                                                Text: @entity.GetString("text")
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    }

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>AI Enrichment(Entity Recognition)検索結果は見つかりません。</p>
        }
    </div>

    <!-- Display AI Enrichment(Key Phrase Extraction) Search Results -->
    <div class="row">
        <h3>AI Enrichment(Key Phrase Extraction)検索結果</h3>
        @if (Model?.AIEnrichKeyPhraseExtractionSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.AIEnrichKeyPhraseExtractionSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

                    @if (result.Document.ContainsKey("keyPhrases") && result.Document["keyPhrases"] is object[] objList)
                    {
                        <div class="row">
                            <div class="col-md-3">
                                <strong>keyPhrases</strong> <!-- Dynamically display the key -->
                            </div>
                            <div class="col-md-9">
                                @for (int i = 0; i < objList.Length; i++)
                                {
                                    var objText = objList[i] as string; // Safely cast to string.
                                    if (objText != null)
                                    {
                                        <text>[</text>

                                        @Html.Raw(objText)

                                        <text>]</text>
                                        if (i < objList.Length - 1)
                                        {
                                            @:,
                                        }
                                    }
                                }
                            </div>
                        </div>
                    }

                    @if (result.Document.ContainsKey("namedEntities") && result.Document["namedEntities"] is object[] recognizedEntities)
                    {
                        <div class="row">
                            <div class="col-md-3">
                                <strong>Recognized Entities</strong>
                            </div>
                            <div class="col-md-9">
                                <ul>
                                    @foreach (var entityObject in recognizedEntities)
                                    {
                                        // Cast each entity to a SearchDocument
                                        if (entityObject is Azure.Search.Documents.Models.SearchDocument entity)
                                        {
                                            <li>
                                                Category: @entity.GetString("category"),
                                                SubCategory: @(entity.GetString("subcategory") ?? "N/A"),
                                                Confidence Score: @entity.GetDouble("confidenceScore"),
                                                Length: @entity.GetInt32("length"),
                                                Offset: @entity.GetInt32("offset"),
                                                Text: @entity.GetString("text")
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    }

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>AI Enrichment(Key Phrase Extraction)検索結果は見つかりません。</p>
        }
    </div>

    <!-- Display AI Enrichment(Language Detection) Search Results -->
    <div class="row">
        <h3>AI Enrichment(Language Detection)検索結果</h3>
        @if (Model?.AIEnrichLanguageDetectionSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.AIEnrichLanguageDetectionSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

                    @if (result.Document.ContainsKey("languageName") && result.Document["languageName"] is string languageJson)
                    {
                        try
                        {
                            var languageNames = JsonSerializer.Deserialize<List<string>>(languageJson);
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>言語</strong>
                                </div>
                                <div class="col-md-9">
                                    @string.Join(", ", languageNames)
                                </div>
                            </div>
                        }
                        catch (JsonException)
                        {
                            <div>Error parsing language names.</div>
                        }
                    }

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>AI Enrichment(Language Detection)検索結果は見つかりません。</p>
        }
    </div>

    <!-- Display AI Enrichment(PII Detection) Search Results -->
    <div class="row">
        <h3>AI Enrichment(PII Detection)検索結果</h3>
        @if (Model?.AIEnrichPIIDetectionSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.AIEnrichPIIDetectionSearchResults.GetResults())
            {
                <div class="container mt-4">

                    @Html.Partial("_SearchResultPartial", result)

@*                     @if (result.Document.ContainsKey("maskedText") && result.Document["maskedText"] is object[] objList)
                    {
                        <div class="row">
                            <div class="col-md-3">
                                <strong>Masked Text</strong>
                            </div>
                            <div class="col-md-9">
                                @for (int i = 0; i < objList.Length; i++)
                                {
                                    var objText = objList[i] as string; // Safely cast to string.
                                    if (objText != null)
                                    {
                                        <text>[</text>

                                        @Html.Raw(objText)

                                        <text>]</text>
                                        if (i < objList.Length - 1)
                                        {
                                            @:,
                                        }
                                    }
                                }
                            </div>
                        </div>
                    } *@

                    @if (result.Document.ContainsKey("maskedText"))
                    {
                        var jsonString = result.Document["maskedText"].ToString();
                        var objList = JsonDocument.Parse(jsonString).RootElement.EnumerateArray().Select(element => element.GetString()).ToArray();

                        if (objList != null && objList.Length > 0)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>Masked Text</strong> <!-- Dynamically display the key -->
                                </div>
                                <div class="col-md-9">
                                    @for (int i = 0; i < objList.Length; i++)
                                    {
                                        var objText = objList[i]; // Already a string, no need to cast.
                                        if (objText != null)
                                        {
                                            <text>[</text>

                                            @Html.Raw(objText)

                                            <text>]</text>
                                            if (i < objList.Length - 1)
                                            {
                                                @:,
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }


                    @if (result.Document.ContainsKey("piiEntities") && result.Document["piiEntities"] is object[] recognizedEntities)
                    {
                        <div class="row">
                            <div class="col-md-3">
                                <strong>PII Entities</strong>
                            </div>
                            <div class="col-md-9">
                                <ul>
                                    @foreach (var entityObject in recognizedEntities)
                                    {
                                        // Cast each entity to a SearchDocument
                                        if (entityObject is Azure.Search.Documents.Models.SearchDocument entity)
                                        {
                                            <li>
                                                Text: @entity.GetString("text"),
                                                Type: @entity.GetString("type"),
                                                Sub Type: @(entity.GetString("subtype") ?? "N/A"),
                                                Score: @entity.GetDouble("score"),
                                                Length: @entity.GetInt32("length"),
                                                Offset: @entity.GetInt32("offset")                                                
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                        </div>
                    }

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>AI Enrichment(Language Detection)検索結果は見つかりません。</p>
        }
    </div>

</div>