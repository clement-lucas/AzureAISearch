@using System.Text.RegularExpressions
@using System.Text
@using DocumentSearchPortal.Helpers

@model DocumentSearchPortal.Models.SearchResultViewModel

@{
    ViewData["Title"] = "ドキュメント検索";
}

<h2>@ViewData["Title"]</h2>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize the multi-select dropdown
            // Example using jQuery for a basic multi-select, consider using a plugin for enhanced UX
            $('#selectedIndexes').select2();
        });
    </script>
}

<!-- Search Controls -->

<div class="row">
    <form asp-controller="Search" asp-action="Search" method="post">
            <!-- Search Keywords -->
            <div class="form-group row">
                <label for="searchQuery" class="col-sm-2 col-form-label">検索キーワード</label>
                <div class="col-sm-10">
                <input type="text" id="searchQuery" name="SearchQuery" class="form-control" value="@Model.SearchQuery" placeholder="検索キーワードを入力">
                </div>
            </div>

            <!-- Filter Expression and Order By Expression -->
            <div class="form-group row">
                <label for="filterExpression" class="col-sm-2 col-form-label">フィルター式</label>
                <div class="col-sm-4">
                    <input type="text" id="filterExpression" name="FilterExpression" class="form-control" value="@Model.FilterExpression" placeholder="例：Category eq 'Category1'and metadata_storage_last_modified ge 2024-02-28">
                </div>
                <label for="orderbyExpression" class="col-sm-2 col-form-label">OrderBy式</label>
                <div class="col-sm-4">
                <input type="text" id="orderbyExpression" name="OrderByExpression" class="form-control" value="@Model.OrderByExpression" placeholder="例：metadata_storage_last_modified desc">
                </div>
            </div>

            <!-- Search Results Count and Highlight Results Count -->
            <div class="form-group row">
                <label for="countSearchResult" class="col-sm-2 col-form-label">検索結果数</label>
                <div class="col-sm-4">
                <input type="number" id="countSearchResult" name="CountSearchResult" class="form-control" value="@Model.CountSearchResult" placeholder="例：5">
                </div>
                <label for="countHighlightResult" class="col-sm-2 col-form-label">ハイライト結果数</label>
                <div class="col-sm-4">
                <input type="number" id="countHighlightResult" name="CountHighlightResult" class="form-control" value="@Model.CountHighlightResult" placeholder="例：2">
                </div>
            </div>

            <!-- Vector Search Count and Max characters Count -->
            <div class="form-group row">
                <label for="countVectorResult" class="col-sm-2 col-form-label">ベクトル結果の数</label>
                <div class="col-sm-4">
                <input type="number" id="countVectorResult" name="countVectorResult" class="form-control" value="@Model.CountVectorResult" placeholder="例：2">
                </div>
                <label for="countPrefixSuffix" class="col-sm-2 col-form-label">前後の文字数</label>
                <div class="col-sm-4">
                <input type="number" id="countPrefixSuffix" name="CountPrefixSuffix" class="form-control" value="@Model.CountPrefixSuffix" placeholder="例：10">
                </div>
            </div>

            <!-- Search Mode -->
            <div class="form-group row">
                <label for="searchMode" class="col-sm-2 col-form-label">検索モード</label>
                <div class="col-sm-4">
                <input type="text" id="searchMode" name="SearchMode" class="form-control" value="@Model.SearchMode" placeholder="例：Any or All">
                </div>
            <label for="selectedIndexes">1 つまたは複数のインデックスを選択してください</label>
            <div class="col-sm-4">
                <select asp-for="SelectedIndexes" asp-items="@(new SelectList(Model.AvailableIndexes))" class="form-control" id="selectedIndexes" multiple="multiple">
                </select>
            </div>
            </div>

            <!-- Submit Button -->
            <div class="form-group row">
                <div class="col-sm-10">
                <button type="submit" class="btn btn-primary">検索</button>
                </div>
            </div>
    </form>
</div>
<hr /> <!-- Add a horizontal rule to separate results -->

<div class="row">
    <h3>キーワード検索結果</h3>
    <!-- Display Normal Search Results -->
    <div class="row">
        @if (Model?.NormalSearchResults?.TotalCount > 0)
        {            
            @foreach (var result in Model.NormalSearchResults.GetResults())
            {
                <div class="container mt-4">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Score</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Score != null ? result.Score : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>ファイル名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("metadata_storage_name") ? result.Document["metadata_storage_name"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正日</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("metadata_storage_last_modified") ? result.Document["metadata_storage_last_modified"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>説明</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Description") ? result.Document["Description"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>カテゴリー</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Category") ? result.Document["Category"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>情報名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("InformationId") ? result.Document["InformationId"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>プロトコルID</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ProtocolId") ? result.Document["ProtocolId"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>公開範囲</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("DisclosureScope") ? result.Document["DisclosureScope"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正者</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ModifiedBy") ? result.Document["ModifiedBy"] : string.Empty)
                        </div>
                    </div>

                    <!-- Highlighted search contents -->
                    @if (result?.Highlights?.Count > 0 && result.Highlights.ContainsKey("content"))
                    {
                        var countPrefixSuffix = Model.CountPrefixSuffix.HasValue ? Convert.ToInt32(Model.CountPrefixSuffix) : 0;

                        foreach (var originalSentence in result.Highlights["content"])
                        {
                            if (countPrefixSuffix > 0)
                            {
                                string adjustedSentence = HighlightTextHelper.ProcessText(originalSentence, countPrefixSuffix);

                                <div class="row">
                                    <div class="col-md-3">
                                        <strong>コンテンツからのハイライト (トリミングあり)</strong>
                                    </div>
                                    <div class="col-md-9">
                                        @Html.Raw(adjustedSentence)
                                    </div>
                                </div>

                            }

                            // Display the full highlight without trimming
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>コンテンツからのハイライト</strong>
                                </div>
                                <div class="col-md-9">
                                    @Html.Raw(originalSentence.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <p>コンテンツに利用可能なハイライトはありません。</p>
                            </div>
                        </div>
                    }

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>キーワード検索の結果は見つかりません。</p>
        }
    </div>

    <!-- Display Vector Search Results -->
    <div class="row">
        <h3>ベクトル検索結果</h3>
        @if (Model?.VectorSearchResults?.TotalCount > 0)
        {            
            @foreach (var result in Model.VectorSearchResults.GetResults())
            {
                <div class="container mt-4">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Score</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Score != null ? result.Score : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>ファイル名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("title") ? result.Document["title"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正日</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("metadata_storage_last_modified") ? result.Document["metadata_storage_last_modified"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>説明</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Description") ? result.Document["Description"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>カテゴリー</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Category") ? result.Document["Category"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>情報名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("InformationId") ? result.Document["InformationId"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>プロトコルID</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ProtocolId") ? result.Document["ProtocolId"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>公開範囲</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("DisclosureScope") ? result.Document["DisclosureScope"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正者</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ModifiedBy") ? result.Document["ModifiedBy"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>ベクトルチャンク</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("chunk") ? result.Document["chunk"] : string.Empty)
                        </div>
                    </div>
                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>ベクトル検索の結果は見つかりません。</p>
        }
    </div>

    <!-- Display Hybrid Search Results -->
    <div class="row">
        <h3>セマンティック再ランキングを含むハイブリッド(Ada Model)検索結果</h3>
        @if (Model?.HybridAdaSearchResults?.TotalCount > 0)
        {            
            @foreach (var result in Model.HybridAdaSearchResults.GetResults())
            {
                <div class="container mt-4">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Score</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Score != null ? result.Score : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Semantic Reranker Score</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.SemanticSearch.RerankerScore != null ? result.SemanticSearch.RerankerScore : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>ファイル名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("title") ? result.Document["title"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正日</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("metadata_storage_last_modified") ? result.Document["metadata_storage_last_modified"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>説明</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Description") ? result.Document["Description"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>カテゴリー</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Category") ? result.Document["Category"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>情報名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("InformationId") ? result.Document["InformationId"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>プロトコルID</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ProtocolId") ? result.Document["ProtocolId"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>公開範囲</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("DisclosureScope") ? result.Document["DisclosureScope"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正者</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ModifiedBy") ? result.Document["ModifiedBy"] : string.Empty)
                        </div>
                    </div>
                    <!-- Highlighted search contents -->
                    @if (result?.SemanticSearch?.Captions?.Any() == true)
                    {
                        foreach (var caption in result.SemanticSearch.Captions)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>キャプション</strong>
                                </div>
                                <div class="col-md-9">
                                    @if (caption?.Highlights != null && caption?.Highlights != "")
                                    {
                                        @Html.Raw(caption?.Highlights?.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                    }
                                    else
                                    {
                                    @(caption?.Text)
                                    }
                                    
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <p>セマンティックキャプションはありません。</p>
                            </div>
                        </div>
                    }

                    <!-- Highlighted search contents -->
                    @if (result?.Highlights?.Count > 0 && result.Highlights.ContainsKey("chunk"))
                    {
                        foreach (var highlight in result.Highlights["chunk"])
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>チャンクのハイライト</strong>
                                </div>
                                <div class="col-md-9">
                                @Html.Raw(highlight.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                        <div class="col-md-12">
                                <p>チャンクに利用可能なハイライトはありません。</p>
                        </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Chunk</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("chunk") ? result.Document["chunk"] : string.Empty)
                        </div>
                    </div>
                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>ハイブリッド検索結果は見つかりません。</p>
        }
    </div>

    <!-- Display Hybrid Custom Vector Search Results -->
    <div class="row">
        <h3>セマンティック再ランキングを含むハイブリッド(Sentence Transform Model)検索結果</h3>
        @if (Model?.HybridCustomVectorSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.HybridCustomVectorSearchResults.GetResults())
            {
                <div class="container mt-4">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Score</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Score != null ? result.Score : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Semantic Reranker Score</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.SemanticSearch.RerankerScore != null ? result.SemanticSearch.RerankerScore : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>ファイル名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("title") ? result.Document["title"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正日</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("metadata_storage_last_modified") ? result.Document["metadata_storage_last_modified"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>説明</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Description") ? result.Document["Description"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>カテゴリー</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Category") ? result.Document["Category"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>情報名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("InformationId") ? result.Document["InformationId"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>プロトコルID</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ProtocolId") ? result.Document["ProtocolId"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>公開範囲</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("DisclosureScope") ? result.Document["DisclosureScope"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正者</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ModifiedBy") ? result.Document["ModifiedBy"] : string.Empty)
                        </div>
                    </div>
                    <!-- Highlighted search contents -->
                    @if (result?.SemanticSearch?.Captions?.Any() == true)
                    {
                        foreach (var caption in result.SemanticSearch.Captions)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>キャプション</strong>
                                </div>
                                <div class="col-md-9">
                                    @if (caption?.Highlights != null && caption?.Highlights != "")
                                    {
                                        @Html.Raw(caption?.Highlights?.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                    }
                                    else
                                    {
                                        @(caption?.Text)
                                    }

                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <p>セマンティックキャプションはありません。</p>
                            </div>
                        </div>
                    }

                    <!-- Highlighted search contents -->
                    @if (result?.Highlights?.Count > 0 && result.Highlights.ContainsKey("chunk"))
                    {
                        foreach (var highlight in result.Highlights["chunk"])
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>チャンクのハイライト</strong>
                                </div>
                                <div class="col-md-9">
                                    @Html.Raw(highlight.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <p>チャンクに利用可能なハイライトはありません。</p>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Chunk</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("chunk") ? result.Document["chunk"] : string.Empty)
                        </div>
                    </div>
                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>Hybrid_Custom_SentenceTransformer 検索結果は見つかりません。</p>
        }
    </div>
    
    <!-- Display SQL + Normal Search Results -->
    <div class="row">
        <h3>SQL+キーワード検索結果</h3>
        @if (Model?.CombinedSearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.CombinedSearchResults.GetResults())
            {
                <div class="container mt-4">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Score</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Score != null ? result.Score : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>ファイル名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("metadata_storage_name") ? result.Document["metadata_storage_name"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正日</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("metadata_storage_last_modified") ? result.Document["metadata_storage_last_modified"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>説明</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Description") ? result.Document["Description"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>カテゴリー</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("CategoryName") ? result.Document["CategoryName"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>情報名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("InformationName") ? result.Document["InformationName"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>プロトコルID</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ProtocolName") ? result.Document["ProtocolName"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>公開範囲</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("DisclosureScopeName") ? result.Document["DisclosureScopeName"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正者</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ModifiedByName") ? result.Document["ModifiedByName"] : string.Empty)
                        </div>
                    </div>

                    <!-- Highlighted search contents -->
                    @if (result?.Highlights?.Count > 0 && result.Highlights.ContainsKey("content"))
                    {
                        var countPrefixSuffix = Model.CountPrefixSuffix.HasValue ? Convert.ToInt32(Model.CountPrefixSuffix) : 0;

                        foreach (var originalSentence in result.Highlights["content"])
                        {
                            if (countPrefixSuffix > 0)
                            {
                                // Pattern to match highlights
                                string pattern = @"<em>.*?</em>";

                                // Use a StringBuilder to build the result
                                StringBuilder adjustedSentence = new StringBuilder();
                                int lastPosition = 0;

                                foreach (Match match in Regex.Matches(originalSentence, pattern))
                                {
                                    // Calculate prefix
                                    int prefixStart = Math.Max(lastPosition, match.Index - countPrefixSuffix);
                                    if (prefixStart > lastPosition)
                                    {
                                        // If not at the beginning, append "***"
                                        //if (lastPosition != 0)
                                        adjustedSentence.Append(" ***");
                                        adjustedSentence.Append(originalSentence.Substring(prefixStart, match.Index - prefixStart));
                                    }
                                    else if (lastPosition == 0 && match.Index != 0)
                                    {
                                        // If at the beginning but not the very start, prepend "***"
                                        adjustedSentence.Append("***");
                                    }

                                    // Append the highlight
                                    adjustedSentence.Append(match.Value);

                                    // Update lastPosition to the end of the current match
                                    lastPosition = match.Index + match.Length;
                                }

                                // Calculate and append suffix if necessary
                                if (lastPosition < originalSentence.Length)
                                {
                                    int suffixEnd = Math.Min(originalSentence.Length, lastPosition + countPrefixSuffix);
                                    if (suffixEnd > lastPosition)
                                    {
                                        adjustedSentence.Append(originalSentence.Substring(lastPosition, suffixEnd - lastPosition));
                                    }
                                    // Append "***" if not at the end
                                    if (suffixEnd < originalSentence.Length) adjustedSentence.Append("***");
                                }

                                <div class="row">
                                    <div class="col-md-3">
                                        <strong>コンテンツからのハイライト (トリミングあり)</strong>
                                    </div>
                                    <div class="col-md-9">
                                        @Html.Raw(adjustedSentence.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                    </div>
                                </div>
                            }
                            // Display the full highlight without trimming
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>コンテンツのハイライト</strong>
                                </div>
                                <div class="col-md-9">
                                    @Html.Raw(originalSentence.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <p>コンテンツに利用可能なハイライトはありません。</p>
                            </div>
                        </div>
                    }

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>SQL+キーワード検索の結果は見つかりません。</p>
        }
    </div>

    <h3>Document Security Index検索結果</h3>
    <!-- Display Normal Search Results -->
    <div class="row">
        @if (Model?.SecuritySearchResults?.TotalCount > 0)
        {
            @foreach (var result in Model.SecuritySearchResults.GetResults())
            {
                <div class="container mt-4">
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Score</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Score != null ? result.Score : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>ファイル名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("metadata_storage_name") ? result.Document["metadata_storage_name"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正日</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("metadata_storage_last_modified") ? result.Document["metadata_storage_last_modified"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>説明</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Description") ? result.Document["Description"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>カテゴリー</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("Category") ? result.Document["Category"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>情報名</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("InformationId") ? result.Document["InformationId"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>プロトコルID</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ProtocolId") ? result.Document["ProtocolId"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>公開範囲</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("DisclosureScope") ? result.Document["DisclosureScope"] : string.Empty)
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>修正者</strong>
                        </div>
                        <div class="col-md-9">
                            @(result.Document.ContainsKey("ModifiedBy") ? result.Document["ModifiedBy"] : string.Empty)
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3">
                            <strong>User Group</strong>
                        </div>
                        <div class="col-md-9">
                            @if (result.Document.ContainsKey("UserGroup") && result.Document["UserGroup"] is IEnumerable<object> userGroups)
                            {
                                foreach (var userGroup in userGroups)
                                {
                                    <div>@userGroup.ToString()</div>
                                }
                            }
                            else
                            {
                                <div>None</div>
                            }
                        </div>
                    </div>



                    <!-- Highlighted search contents -->
                    @if (result?.Highlights?.Count > 0 && result.Highlights.ContainsKey("content"))
                    {
                        var countPrefixSuffix = Model.CountPrefixSuffix.HasValue ? Convert.ToInt32(Model.CountPrefixSuffix) : 0;

                        foreach (var originalSentence in result.Highlights["content"])
                        {
                            if (countPrefixSuffix > 0)
                            {
                                string adjustedSentence = HighlightTextHelper.ProcessText(originalSentence, countPrefixSuffix);

                                <div class="row">
                                    <div class="col-md-3">
                                        <strong>コンテンツからのハイライト (トリミングあり)</strong>
                                    </div>
                                    <div class="col-md-9">
                                        @Html.Raw(adjustedSentence)
                                    </div>
                                </div>

                            }

                            // Display the full highlight without trimming
                            <div class="row">
                                <div class="col-md-3">
                                    <strong>コンテンツからのハイライト</strong>
                                </div>
                                <div class="col-md-9">
                                    @Html.Raw(originalSentence.Replace("<em>", "<span class=\"highlighted\">").Replace("</em>", "</span>"))
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-md-12">
                                <p>コンテンツに利用可能なハイライトはありません。</p>
                            </div>
                        </div>
                    }

                    <hr /> <!-- Add a horizontal rule to separate results -->
                </div>
            }
        }
        else
        {
            <p>Document Security Index検索の結果は見つかりません。</p>
        }
    </div>

</div>